<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>daolun_week8</title>
    <link href="/2023/10/24/daolun-week8/"/>
    <url>/2023/10/24/daolun-week8/</url>
    
    <content type="html"><![CDATA[<h1 id="论嵌入式系统特点及其典例以及对RISC-V的认识和理解"><a href="#论嵌入式系统特点及其典例以及对RISC-V的认识和理解" class="headerlink" title="论嵌入式系统特点及其典例以及对RISC-V的认识和理解"></a><strong>论嵌入式系统特点及其典例以及对RISC-V的认识和理解</strong></h1><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="**1.**背景"></a>**1.**<strong>背景</strong></h2><p>嵌入式系统出现在1970年代，美国人用于电子 程控电话交换系统的控制，经过多年发展与完善， 该技术应用范围愈加广泛，并在信息技术加持下， 逐渐走进我们生活之中。该技术可以广泛应用于各 类软件操作系统，完成软、硬件资源调整、控制协 调、任务调度、内容引导等诸多工作。该技术与5G 技术、智能技术融合后，开始拥有较强独立性，促 使系统之间开始拥有良好联系性，进而提升软、硬 件整体工作效率。[1]</p><h2 id="2-嵌入式系统的特点-组成-典例"><a href="#2-嵌入式系统的特点-组成-典例" class="headerlink" title="**2.**嵌入式系统的特点 组成 典例"></a>**2.**<strong>嵌入式系统的特点 组成 典例</strong></h2><h3 id="2-1嵌入式系统的特点"><a href="#2-1嵌入式系统的特点" class="headerlink" title="2.1嵌入式系统的特点"></a><strong>2.1嵌入式系统的特点</strong></h3><p>嵌入式系统作为一种应用型系统, 它与通用计算机系统有着本质的区别, 主要具有以下几个特点:[2]</p><p>特异性（专用性）：通用计算机系统常见于公司办公, 科学计算, 银行管账等场合。而嵌入式系统常是针对具体应用而产生的一种特定的、专用的系统, 时刻以客户的具体需求为重。[2]</p><p>可靠性：嵌入式系统通常需要在恶劣的环境下工作，需要具有良好的抗干扰和自恢复的能力，才能保证嵌入式系统工作的稳定和安全。</p><p>实时性：嵌入式系统通常需要在有限的时间内完成一些特定的任务，对延迟和错误有着比较严格的要求，所以嵌入式系统要对外界环境进行实时的监测。</p><p>多样性：嵌入式系统多种多样，面对不同的应用需求，就有不同的嵌入式系统。</p><h3 id="2-2嵌入式系统的组成"><a href="#2-2嵌入式系统的组成" class="headerlink" title="2.2嵌入式系统的组成"></a><strong>2.2嵌入式系统的组成</strong></h3><p> 嵌入式系统的组成可简要分为硬件结构，中间层结构，软件结构，这三层结构。</p><p>****微处理器****：嵌入式微处理器，嵌入式微控制器（MCU），嵌入式DSP 处理器，嵌入式片上系统等，[3]</p><p>****传感器****：传感器是系统对外界环境变化的“感受器官”。</p><p>****存储器****：PC 机不同的是，嵌入式系统存储器不需要过大的存储器容量，但是非常注重存储器的运行效率和能耗。随着计算机技术的进步与发展，存储器的运行速度获得显著提高，存储器的能耗和成本也大大降低，存储器的运行变得更加的有效和可靠。</p><p>****机械和电子元件****：机械和电子元件作为嵌入式系统的重要组成部分，其规模也是最大的。对实现系统的具体功能有着重大的作用，在不同的产品中，由于机械电子元件的差异性在系统的运行过程中也就具有不同的功能。如直升飞机的螺旋桨的设计可以做到垂直起飞，战斗机机身尖端的鸭嘴布局可以减少空气阻力。[2]</p><p>****中间层结构层面****：该结构层面是指硬件与软件之间联系结构，其主要应用于各类借口开发，及时不同嵌入式系统也能够通过中间层结构完成信息传递，数据传输与接收工作。[1]</p><p>****软件系统****：运行软件等。</p><h3 id="2-3嵌入式系统的典例"><a href="#2-3嵌入式系统的典例" class="headerlink" title="2.3嵌入式系统的典例"></a><strong>2.3嵌入式系统的典例</strong></h3><p> 就以****智能手机****为例，它是一种典型的嵌入式系统，其系统软硬件架构如下：</p><ol><li><strong>处理器****：</strong>处理器是智能手机的核心部件，负责执行各种程序和指令。</li><li><strong>内存</strong>：内存是智能手机的临时存储部件。</li></ol><p><strong>3.</strong> ****存储****：存储是智能手机的永久存储部件，用于存放固定的程序和数据。</p><p><strong>4.</strong> ****传感器****：传感器是智能手机的感知部件，可以获取外部环境的信息。</p><p><strong>5.</strong> ****通信模块****：通信模块是智能手机的连接部件，用于与外部设备或网络进行数据交换。</p><p>接下来是软件方面：</p><p><strong>1.</strong> ****操作系统****：操作系统是智能手机的基础软件，负责管理硬件资源、支持应用程序等。</p><p><strong>2.</strong> ****应用程序****：应用程序是智能手机的核心软件，负责实现用户的需求和功能，如通话、短信、浏览器、游戏、社交、支付等。</p><h2 id="3-RISC-V的认识和理解"><a href="#3-RISC-V的认识和理解" class="headerlink" title="3. RISC-V的认识和理解"></a>3. <strong>RISC-V的认识和理解</strong></h2><p>ＲＩＳＣ－Ｖ是加州大学伯克利分校（ＵｎｉｖｅｒｓｉｔｙｏｆＣａｌｉｆｏｒ－ｎｉａａｔＢｅｒｋｅｌｅｙ，以下简称 ＵＣＢ）设计并发布的一种开源指令集架构，其目标是成为指令集架构领域的 Ｌｉｎｕｘ，应用覆盖ＩｏＴ（ＩｎｔｅｒｎｅｔｏｆＴｈｉｎｇｓ）设备、桌面计算机、高性能计算机等众多领域。[4]</p><p><strong>1.</strong> ****灵活的创新基础****：RISC-V处理器并非建立在一个架构之上， 而是建立在一个固定指令集(ISA)上。其处理器 微架构的设计是灵活的，供应商自由地实施他 们确信最适合其应用的任何架构。</p><p><strong>2.</strong> ****移植性：****那些进入大批量制造的设计，将会获益于RISC-V 的可移植性，开发人员能够通过软核版 本的RISC-V内核在FPGA 中展开设计，然后开 始交付产品(例如，热成像相机)。</p><p><strong>3.</strong> ****软件稳定性：****长使用寿命是RISC-V的一个主要优势，开发人员可以信赖固定ISA并保护软件投资。[5]</p><p>参考文献：</p><p>[1] 张志慧.嵌入式系统的特点与发展趋势分析[J].电子技术,2023,52(07):286-287.</p><p>[2] 郭静,罗娇.浅谈嵌入式系统的构成与特点[J].电子技术与软件工程,2015(18):204.</p><p>[3] 雷亚平,沈春林,杨忠.嵌入式系统的组成、设计与调试[J].航空计算技术,2003(03):116-119.</p><p>[4] 雷思磊.RISC-V架构的开源处理器及SoC研究综述[J].单片机与嵌入式系统应用,2017,17(02):56-60+76.</p><p>[5]Marena T .RISC-V:改变SoC器件的开发[J].中国电子商情(基础电子),2017(12):34-35.DOI:10.19584&#x2F;j.cnki.11-3648&#x2F;f.2017.12.008.</p>]]></content>
    
    
    <categories>
      
      <category>导论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>导论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023SSSCTF WriteUp</title>
    <link href="/2023/10/22/2023SSSCTF-WriteUp/"/>
    <url>/2023/10/22/2023SSSCTF-WriteUp/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="2023SSSCTFのwrite-up"><a href="#2023SSSCTFのwrite-up" class="headerlink" title="2023SSSCTFのwrite up"></a>2023SSSCTFのwrite up</h1><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test your nc"></a>test your nc</h3><p>根据<a href="https://loora1n.github.io/2022/09/13/nc%20%E6%98%AF%E4%BB%80%E4%B9%88/">nc教程</a>,下载并使用windows版nc，然后用powershell打开nc，键入’.&#x2F;ncat 地址 端口’，成功连接后，输入’cat &#x2F;flag’就能拿到flag了  </p><h3 id="Hack-Traffic-Light"><a href="#Hack-Traffic-Light" class="headerlink" title="Hack Traffic Light"></a>Hack Traffic Light</h3><p>利用nc连接上服务器，<br><img src="/2023/10/22/2023SSSCTF-WriteUp/hardtriffic1.png"><br>按照题目要求随便输入几个数，然后观察输出的变化！，不难发现，三个十六进制数中，第一个数字与第三个数字所对应的秒数互换了，所以我们只要将题目要求的秒数转换成十六进制，并交换一三位再输入，就能得到flag了！  </p><h3 id="strange-graphic"><a href="#strange-graphic" class="headerlink" title="strange graphic"></a>strange graphic</h3><p>利用nc连接上服务器，根据题目，我们不难猜测出这道题目要利用c语言中整形变量数据溢出的漏洞，因此我们只需要构造特定的数，来满足题目条件</p><ol><li>第一小题，他们的和的两倍小于题目要求的，所以我们只需要让结果超出2147483648，让其为一个负数就行了  </li><li>第二小题也是这样，不过构造起来麻烦一点(其实是我忘了，我记忆中好像是构造了一个结果超过了两倍的2147483648的数，让他溢出后变成了一个小正数9，满足题目要求) 然后这里利用了网上的一个分解整数的软件，链接就不放了，网上蛮多的</li><li>第三部分输入-1和2147483648就行了，下面放图片<br><img src="/2023/10/22/2023SSSCTF-WriteUp/strange1.png"></li></ol><h3 id="这就是我所做出pwn试题"><a href="#这就是我所做出pwn试题" class="headerlink" title="这就是我所做出pwn试题"></a>这就是我所做出pwn试题</h3><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="操控加密"><a href="#操控加密" class="headerlink" title="操控加密"></a>操控加密</h3><p>题目给了我们一串密文和一个用来加密的程序，输入字符便能给我们返回加密后的数据，<br><img src="/2023/10/22/2023SSSCTF-WriteUp/caokongjiami1.png"><br>根据flag的开头，然后把键盘上<br>个字母的大小写和数字输进去，然后人肉破解(解密是真不会啊)，这样我们就能得到flag了</p><h4 id="这就是我所做出REVERSE试题"><a href="#这就是我所做出REVERSE试题" class="headerlink" title="这就是我所做出REVERSE试题"></a>这就是我所做出REVERSE试题</h4><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><p>题目给了我们一个网站,我们打开网页源代码可以看见这样一行提示<img src="/2023/10/22/2023SSSCTF-WriteUp/ezphp1.png"><br>将getflag.php输入到url后面，我们可以进录到一个新的页面，打开源码，有以下信息<img src="/2023/10/22/2023SSSCTF-WriteUp/Snipaste_2023-10-12_19-37-31.png">这明显是想要提示我们利用get传参的办法，于是加入?DLUT&#x3D;2023SSSCTF，成功获取flag.<br>另外，进入网页的robots.txt文件我们还能获取到彩蛋的最后一个碎片</p><h3 id="INFO-SELECTION"><a href="#INFO-SELECTION" class="headerlink" title="INFO SELECTION"></a>INFO SELECTION</h3><p>一进到网页网页提示说不会让我们获取源码，我们点击f12,检查源码，可以发现hint<br><img src="/2023/10/22/2023SSSCTF-WriteUp/info1.png"><br>提示我们敏感文件都有哪些，我们不难想到flag可能藏在如roobots.txt <a href="http://www.zip/">www.zip</a> 备份（其实是我忘记了第三个是什么貌似是一个.bak文件?）等文件中，在URL中加上这些我们就能够获取到flag的三个碎片，从而得到正确的flag了</p><h3 id="YuanのSQL"><a href="#YuanのSQL" class="headerlink" title="YuanのSQL"></a>YuanのSQL</h3><p>进入网站(我超，原)，观察到网站下方的提示，不难想到这是一个有关于sql注入的题目<br><img src="/2023/10/22/2023SSSCTF-WriteUp/yuansql.png"><br>不难发现php语句中缺少了引号，键入数值为1的id时，我们获取到了“scr1w”,当键入的数值为2时，我们就成功获取到了flag（具体流程给忘了，所以说的有点不清楚，但大致流程确实是这样的）</p><h3 id="ezphp2-0"><a href="#ezphp2-0" class="headerlink" title="ezphp2.0"></a>ezphp2.0</h3><p>进入网页后我们能看见网页给的php代码<br><img src="/2023/10/22/2023SSSCTF-WriteUp/ezphp2.png"><br>阅读代码我们不难知道我们首先要让’DLUT&#x3D;A306’成立，代码中要求WEB1不等于WEB2但都要等于114514，而”&#x3D;&#x3D;”为弱相等，我们便可以将他们分别等于114514a于114514b,以get传参后出现<br><img src="/2023/10/22/2023SSSCTF-WriteUp/ezphp2_2.png"><br>根据弹出的内容，我们可知这有关php伪协议，且经测试flag.php中的flag不能直接获得，所以要经base64编码后获得,满足这两条后，我们构造payload<br><code>http://210.30.97.133:10009/?DLUT=A306&amp;WEB1=114514a&amp;WEB2=114514b&amp;file=php://filter/convert.base64-encode/resource=flag.php</code><br>获取base64编码后的内容<br><code>T0hISEhISEhISEhISCEKWW91IEp1c3QgR2V0IFRoZSBGbGFnISEhIQpTbyBOZXdCZWUh4pSAPeKJoc6jKCgo44Gk4oCizIDPieKAosyBKeOBpOKUgD3iiaHOoygoKOOBpOKAosyAz4nigKLMgSnjgaTilIA94omhzqMoKCjjgaTigKLMgM+J4oCizIEp44GkClRoaXMgaXMgdGhlIGZsYWc6Cjw/cGhwCiRGTEFHID0gJ2ZsYWd7ZDczYmE2ZmItZWJjMC00MWYxLWE3MGYtY2MwOWRlMjlhMjNmfSc7Cj8+</code><br>再解码就能获得flag了</p><h3 id="SleepyHead"><a href="#SleepyHead" class="headerlink" title="SleepyHead"></a>SleepyHead</h3><p>进入网页，看见有关使用浏览器的信息<br><img src="/2023/10/22/2023SSSCTF-WriteUp/sleephead1.png"><br>猜测可能与http headers的修改有关，于是拖进burpsuite中查看，将浏览器改为Scr1w后变为：<br><img src="/2023/10/22/2023SSSCTF-WriteUp/sleep2.png"><br>加上Referer:Scr1w.Studio<br><img src="/2023/10/22/2023SSSCTF-WriteUp/sleep3.png"><br>加上DNT:1变成：<br><img src="/2023/10/22/2023SSSCTF-WriteUp/sleep4.png"><br>加上via:claaaaash.mono<br><img src="/2023/10/22/2023SSSCTF-WriteUp/sleep5.png"><br>加上X-Forwarded-For:127.0.0.1<br><img src="/2023/10/22/2023SSSCTF-WriteUp/sleep6.png"><br>成功获取flag，<br><img src="/2023/10/22/2023SSSCTF-WriteUp/phase7.png"></p><h4 id="这就是我所做出的WEB试题"><a href="#这就是我所做出的WEB试题" class="headerlink" title="这就是我所做出的WEB试题"></a>这就是我所做出的WEB试题</h4><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="等比数列"><a href="#等比数列" class="headerlink" title="等比数列?"></a>等比数列?</h3><p>根据题目的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>a0 =<br>q =????<br>n = <span class="hljs-number">710009</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    a = a0*q % n<br>    a0 = a<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">30</span>:<br>        <span class="hljs-built_in">print</span>(a)<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">66</span>:<br>        <span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment"># 338473</span><br><span class="hljs-comment"># 519563</span><br></code></pre></td></tr></table></figure><p>可写出这样一个代码(实际上是GPT写的),</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">710009</span><br><br><span class="hljs-comment"># 遍历所有可能的 a0 和 q 的值</span><br><span class="hljs-keyword">for</span> a0 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">10000</span>):<br>    <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n):<br>        <span class="hljs-comment"># 计算第31项和第67项</span><br>        a31 = a0<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>            a31 = a31 * q % n<br>        a67 = a31<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">36</span>):<br>            a67 = a67 * q % n<br>        <span class="hljs-comment"># 检查是否满足题目给出的值</span><br>        <span class="hljs-keyword">if</span> a31 == <span class="hljs-number">338473</span> <span class="hljs-keyword">and</span> a67 == <span class="hljs-number">519563</span>:<br>            <span class="hljs-comment"># 打印出一组解</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a0 =&quot;</span>, a0, <span class="hljs-string">&quot;q =&quot;</span>, q)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>最后破解出a0和q的值分别为3202和2023，从而得出flag(GPT立大功)</p><h3 id="basic-RSA"><a href="#basic-RSA" class="headerlink" title="basic-RSA"></a>basic-RSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python是ctf中最常用的语言，请你通过搜索引擎，自行安装python，并学习如何为python安装第三方库</span><br><span class="hljs-comment"># 在配置好python环境后，你需要自行安装pycryptodome库、gmpy2库</span><br><span class="hljs-comment"># 在完成所有配置后，可以运行这段代码，得到你的flag！</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 导入我们下载的crypto库，方便后续使用库中的函数</span><br><br><span class="hljs-comment"># bytes_to_long()函数，把字母转成数字</span><br>m = bytes_to_long(<span class="hljs-string">b&#x27;**********************************&#x27;</span>)<br><br><span class="hljs-comment"># 生成两个随机的素数，取名p和q</span><br>e = <span class="hljs-number">65537</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br><br><span class="hljs-comment"># 计算p乘q</span><br>n = p*q<br><br><span class="hljs-comment"># RSA加密，pow()实现了次幂运算，第三个参数是模数，例如pow(2,4,3)=(2*2*2*2) % 3 = 1</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-comment"># 输出p、q、c</span><br><span class="hljs-built_in">print</span>(p, q, c)<br><br><span class="hljs-comment"># 下面是解密代码，当你配好所需要的python环境后，上网自行搜索RSA解密的步骤，补全代码进行解密</span><br>p = <span class="hljs-number">11272029161810989637077873599019496877008218675207504587156140192021377360482704022176035187554108368278190548694137066116291687848811218316609251992398531</span><br>q = <span class="hljs-number">8907273588185400007517004981004813156071713948292117095141121709405743482454098895087505262599398998351848699006495710441163005192326918043131527773275261</span><br>n = p*q<br>e = <span class="hljs-number">65537</span><br><br>d =<span class="hljs-number">86878502655260118864644922031588477057410536348819682235197775008566666793725177071665880121392724687843582788113205748413157483597543224904923252083988393307886889482606627681815785098540071203174556413083407356299373068894395628419702691762298577890184942379591377595895204260258458213890493837578458778073</span><br>c = <span class="hljs-number">59456089016060766225332390698350903116623033134514592830079717766948507914949032997169195220803642273910722815705790231122189278462009688705900558121892002228836045157732582528181395382772779860190430228823868911649968133987708461443646703064201375236983090379446718660629027030001866595377945046940440636896</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c, d, n)))<br></code></pre></td></tr></table></figure><p>安装好所对应的库之后，掏出我们的<br><img src="/2023/10/22/2023SSSCTF-WriteUp/bas_rsa1.png"><br>一个个输进去就能解出flag了</p><h3 id="X-2-RSA"><a href="#X-2-RSA" class="headerlink" title="X^2-RSA"></a>X^2-RSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>e = getPrime(<span class="hljs-number">512</span>)<br>n = p*q<br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n)<br>gift1 = p+q<br>gift2 = e**<span class="hljs-number">2</span> % p<br><br>n = <span class="hljs-number">119599732159422912237126092503633593127444912729791769936188025920440247693519660056564377003327876458608897540804699714727762677074095341934117636626737553788910255544086673845028462552403437563867021138226332533523261069120346290748100178821888057505879672808893138750370221354811388445573458187283950529329</span><br>c = <span class="hljs-number">26993320920246459282903918258141924700555534517795083322600888678032578078748098842182757614410623183383625789026194273160849599428611123639374938192451695449150144414006335708435850583611654329589400433382496740881780217929655022786322641976440238749489472351300088441838107888022748740774750642665176409512</span><br>gift1 = <span class="hljs-number">21880888517757890831027504308354774959604394643578725603877760598995238359425630435298497116759287279215040830436678520457866585439083039292573782745193150</span><br>gift2 = <span class="hljs-number">10396530748040666625822969282831155457018939705806203185375728535142910851038248041763489482743937736843953702379394388895553869400661190661679347693932652</span><br></code></pre></td></tr></table></figure><p>代码如上<br>先算出p，q的值，根据p+q,q*q,写出py代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> symbols, Eq, solve<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_p_q</span>(<span class="hljs-params">product, <span class="hljs-built_in">sum</span></span>):<br>    p, q = symbols(<span class="hljs-string">&#x27;p q&#x27;</span>)<br>    <span class="hljs-comment"># 设置方程</span><br>    eq1 = Eq(p*q, product)<br>    eq2 = Eq(p+q, <span class="hljs-built_in">sum</span>)<br>    <span class="hljs-comment"># 解方程</span><br>    solution = solve((eq1,eq2), (p, q))<br>    <span class="hljs-keyword">return</span> solution<br><br><span class="hljs-comment"># 已知的p*q和p+q的值</span><br>product = <span class="hljs-number">119599732159422912237126092503633593127444912729791769936188025920440247693519660056564377003327876458608897540804699714727762677074095341934117636626737553788910255544086673845028462552403437563867021138226332533523261069120346290748100178821888057505879672808893138750370221354811388445573458187283950529329</span>  <span class="hljs-comment"># 这是p*q的值</span><br><span class="hljs-built_in">sum</span> =<span class="hljs-number">21880888517757890831027504308354774959604394643578725603877760598995238359425630435298497116759287279215040830436678520457866585439083039292573782745193150</span>       <span class="hljs-comment"># 这是p+q的值</span><br><br>solution = calculate_p_q(product, <span class="hljs-built_in">sum</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解: <span class="hljs-subst">&#123;solution&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后通过gift2和p算出e</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个函数，用扩展欧几里得算法求解线性同余方程</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exgcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> a, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    d, x, y = exgcd(b, a % b)<br>    <span class="hljs-keyword">return</span> d, y, x - (a // b) * y<br><br><span class="hljs-comment"># 输入x^2%p的值和p的值</span><br>r = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入x^2%p的值：&quot;</span>))<br>p = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入p的值：&quot;</span>))<br><br><span class="hljs-comment"># 判断r是否是p的二次剩余，即是否存在x满足x^2%p=r</span><br>d = exgcd(r, p)[<span class="hljs-number">0</span>] <span class="hljs-comment"># 求r和p的最大公约数</span><br><span class="hljs-keyword">if</span> d != <span class="hljs-number">1</span>: <span class="hljs-comment"># 如果r和p不互质，那么无解</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无解&quot;</span>)<br><span class="hljs-keyword">else</span>: <span class="hljs-comment"># 如果r和p互质，那么有解</span><br>    <span class="hljs-comment"># 使用费马小定理求r的模p平方根，即x^2%p=r</span><br>    <span class="hljs-comment"># 费马小定理：如果a和p互质，那么a^(p-1)%p=1</span><br>    <span class="hljs-comment"># 令a=r，两边同时开方得到r^(p+1)/4%p=x或-x</span><br>    x = <span class="hljs-built_in">pow</span>(r, (p + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, p) <span class="hljs-comment"># 使用pow函数快速求幂取模</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一个可能的解是：&quot;</span>, x)<br></code></pre></td></tr></table></figure><p>解出p q e后丢风二西里就能解出flag了</p><h4 id="这就是我所做出的CRYPTO试题"><a href="#这就是我所做出的CRYPTO试题" class="headerlink" title="这就是我所做出的CRYPTO试题"></a>这就是我所做出的CRYPTO试题</h4><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="快来签到吧！"><a href="#快来签到吧！" class="headerlink" title="快来签到吧！"></a>快来签到吧！</h3><p>一眼社会主义核心价值观加密，找网上工具就能解决了</p><h3 id="不许发电"><a href="#不许发电" class="headerlink" title="不许发电"></a>不许发电</h3><p>用101editor打开(或者放linux里面)，用png.bt模板，发现ihdr的crc校验报错（放linux图片会打不开，因为linux也有crc校验），怀疑改了宽高，修改高后发现底部有一个二维码<br><img src="/2023/10/22/2023SSSCTF-WriteUp/power.png"><br>扫描完二维码就能获取到flag了(所以这题为什么300分)</p><h2 id="尊嘟假嘟"><a href="#尊嘟假嘟" class="headerlink" title="尊嘟假嘟"></a>尊嘟假嘟</h2><p>直接丢excel里面，然后按一下A1那个框就会停止跳动？(猜测出题人应该是想要让我们写个py程序，自动读取A1框的值，然后返回到A2,但不知道为什么点一下就会暂停。。)，使用时间暂停大法后，输入值，将返回值进行base64解密，从而获取flag(所以这题为什么300分)</p><h3 id="未经禁止，允许垂钓！"><a href="#未经禁止，允许垂钓！" class="headerlink" title="未经禁止，允许垂钓！"></a>未经禁止，允许垂钓！</h3><p>拿到图片，先修改高，成功获取一个fakeflag<br>之后丢进kali里用pngcheck,发现有zip压缩文件，提取出来得到<br><img src="/2023/10/22/2023SSSCTF-WriteUp/chuidiao.png"><br>打开fulage.txt发现<br><img src="/2023/10/22/2023SSSCTF-WriteUp/chuidiao2.png"><br>又是一个fakeflag<br>打开010editor,上面没什么问题，滑到最下面，<br><img src="/2023/10/22/2023SSSCTF-WriteUp/chuidiao3.png"><br><img src="/2023/10/22/2023SSSCTF-WriteUp/chuidiao4.png"><br>可以发现这是一张png图片，但是有些问题，观察标题和图片<br><img src="/2023/10/22/2023SSSCTF-WriteUp/chuidioa5.png"><br><img src="/2023/10/22/2023SSSCTF-WriteUp/chuidiao6.png"><br>发现读法就是加密的方式<br>于是编写个py脚本来解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_hex</span>(<span class="hljs-params">hex_string</span>):<br>    hex_list = hex_string.split()<br>    pairs = [hex_list[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(hex_list), <span class="hljs-number">2</span>)]<br>    odd_pairs = pairs[::<span class="hljs-number">2</span>]<br>    even_pairs = pairs[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">return</span> odd_pairs + even_pairs<br><br>hex_string = <span class="hljs-string">&quot;00 49 00 00 45 4E 00 00 44 AE 00 00 42 60 00 00 82 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&quot;</span><br>pairs = process_hex(hex_string)<br><br>output = <span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-string">&#x27; &#x27;</span>.join(pair) <span class="hljs-keyword">for</span> pair <span class="hljs-keyword">in</span> pairs])<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><p>PS；这玩意一次只能解密两行，然后一共有190行，你猜我按了几次ctrl CV?，所以说学会python是件好事(<br>将解密后的16进制码以16进制文件导入010editor保存为png得到<br><img src="/2023/10/22/2023SSSCTF-WriteUp/chuidiao8.png"><br>一眼base64,解码后就能得到flag了（）</p><h4 id="这就是我做出来的misc试题"><a href="#这就是我做出来的misc试题" class="headerlink" title="这就是我做出来的misc试题"></a>这就是我做出来的misc试题</h4><h2 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h2><h3 id="身在曹营心在汉"><a href="#身在曹营心在汉" class="headerlink" title="身在曹营心在汉"></a>身在曹营心在汉</h3><p>无意间在设计组群看到一个奇怪的名字(我是用电脑版qq看的，所以一眼就看到了)，点开就发现了flag</p><h3 id="CanCanWord"><a href="#CanCanWord" class="headerlink" title="CanCanWord"></a>CanCanWord</h3><p>将照片导入手机相册，<br><img src="/2023/10/22/2023SSSCTF-WriteUp/cancanneed.jpg"><br>然后发现图片右下角的<br><img src="/2023/10/22/2023SSSCTF-WriteUp/cancanneed2.png"><br>猜测是从上海浦东国际机场到大连周水子国际机场的飞机，打开<a href="https://www.flightaware.com/live/flight/CCD8954/history/20230826/0245Z/ZSPD/ZYTL">flightaware</a>根据时间和起飞将落地,找到对应航班<br><img src="/2023/10/22/2023SSSCTF-WriteUp/cancanneed3.png"><br>网上搜索不难知道，CA8954是波音737-800型，搜索大连航空飞机的座位表，结合图片，我们不难知道图片所拍摄的是紧急逃生出口，我们在紧急逃生出口的后一排，结合角度，判断出在19C的位置上</p><h4 id="这就是我所做出的OSINT题目"><a href="#这就是我所做出的OSINT题目" class="headerlink" title="这就是我所做出的OSINT题目"></a>这就是我所做出的OSINT题目</h4><p>##GAME<br>###Crossy Road<br>简单地过马路(实际上是拼手速)，完成三条后，页面会提示我们魂斗罗的作弊码，我们在网页中输入上上下下左右左右ba后，页面会提示我们去控制台，这样我们就能获得第一条彩蛋碎片。<br>###Pacman<br>困难模式下胜利我们可以获得flag，简单模式下失败我们会获得第二条彩蛋碎片（其实在控制台里全都能直接看到），<br>看在我解出了三条彩蛋碎片的份上，能不能给我一些奖励(,sleephead里的彩蛋实在是找不到啊，翻了两三遍了。。</p><p>####这就是我所做出的GAME试题</p><p>以上，就是我在本次2023SSSCTF中做出的所有题目的的writeup了</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/22/hello-world/"/>
    <url>/2023/10/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
