<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C语言复习</title>
    <link href="/2023/12/19/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/"/>
    <url>/2023/12/19/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="C语言复习"><a href="#C语言复习" class="headerlink" title="C语言复习"></a>C语言复习</h1><blockquote><p>注意：考试内容不涵盖联合体和文件读写<br>本文件根据课件ppt将过往作业的重要代码加入</p></blockquote><h3 id="一-作业和课件的重要代码案例"><a href="#一-作业和课件的重要代码案例" class="headerlink" title="一.作业和课件的重要代码案例"></a>一.作业和课件的重要代码案例</h3><h4 id="string-h库函数部分代码实现及涉及字符串题目"><a href="#string-h库函数部分代码实现及涉及字符串题目" class="headerlink" title="string.h库函数部分代码实现及涉及字符串题目"></a>string.h库函数部分代码实现及涉及字符串题目</h4><h5 id="1-strcpy-复制"><a href="#1-strcpy-复制" class="headerlink" title="1.strcpy(复制)"></a>1.strcpy(复制)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// 定义一个函数，实现strcpy的功能</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">my_strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src)</span> &#123;<br>    <span class="hljs-comment">// 定义一个指针，指向目标字符串的起始位置</span><br>    <span class="hljs-type">char</span> *p = dest;<br>    <span class="hljs-comment">// 用一个循环，从源字符串的起始位置开始，依次复制每个字符到目标字符串</span><br>    <span class="hljs-keyword">while</span> (*src != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        *p = *src;<br>        p++;<br>        src++;<br>    &#125;<br>    <span class="hljs-comment">// 在目标字符串的末尾添加一个空字符，表示字符串的结束</span><br>    *p = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-comment">// 返回目标字符串的指针</span><br>    <span class="hljs-keyword">return</span> dest;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 定义两个字符串，用来测试函数</span><br>    <span class="hljs-type">char</span> str1[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-type">char</span> str2[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;World&quot;</span>;<br>    <span class="hljs-comment">// 调用函数，将str2复制到str1</span><br>    my_strcpy(str1, str2);<br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1: %s\n&quot;</span>, str1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str2: %s\n&quot;</span>, str2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="2-strcat-连接"><a href="#2-strcat-连接" class="headerlink" title="2.strcat(连接)"></a>2.strcat(连接)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// 定义一个函数，实现strcat的功能</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">my_strcat</span><span class="hljs-params">(<span class="hljs-type">char</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *src)</span> &#123;<br>    <span class="hljs-comment">// 定义一个指针，指向目标字符串的末尾</span><br>    <span class="hljs-type">char</span> *p = dest + <span class="hljs-built_in">strlen</span>(dest);<br>    <span class="hljs-comment">// 用一个循环，从源字符串的起始位置开始，依次复制每个字符到目标字符串</span><br>    <span class="hljs-keyword">while</span> (*src != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        *p = *src;<br>        p++;<br>        src++;<br>    &#125;<br>    <span class="hljs-comment">// 在目标字符串的末尾添加一个空字符，表示字符串的结束</span><br>    *p = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-comment">// 返回目标字符串的指针</span><br>    <span class="hljs-keyword">return</span> dest;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 定义两个字符串，用来测试函数</span><br>    <span class="hljs-type">char</span> str1[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-type">char</span> str2[<span class="hljs-number">20</span>] = <span class="hljs-string">&quot;World&quot;</span>;<br>    <span class="hljs-comment">// 调用函数，将str2追加到str1</span><br>    my_strcat(str1, str2);<br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str1: %s\n&quot;</span>, str1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str2: %s\n&quot;</span>, str2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="3-strlen-长度"><a href="#3-strlen-长度" class="headerlink" title="3.strlen(长度)"></a>3.strlen(长度)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// 定义一个函数，实现strlen的功能</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">my_strlen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)</span> &#123;<br>    <span class="hljs-comment">// 定义一个指针，指向字符串的末尾</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *end = str;<br>    <span class="hljs-comment">// 用一个循环，找到空结束字符的位置</span><br>    <span class="hljs-keyword">while</span> (*end) &#123;<br>        end++;<br>    &#125;<br>    <span class="hljs-comment">// 返回指针之差，即字符串的长度</span><br>    <span class="hljs-keyword">return</span> end - str;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 定义一个字符串，用来测试函数</span><br>    <span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;Hello World&quot;</span>;<br>    <span class="hljs-comment">// 调用函数，计算字符串的长度</span><br>    <span class="hljs-type">int</span> len = my_strlen(str);<br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The length of &#x27;%s&#x27; is %zu\n&quot;</span>, str, len);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="4-strcmp-比较"><a href="#4-strcmp-比较" class="headerlink" title="4.strcmp(比较)"></a>4.strcmp(比较)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// 定义一个函数，实现strcmp的功能</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">my_strcmp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2)</span> &#123;<br>    <span class="hljs-comment">// 用一个循环，从字符串的起始位置开始，依次比较每个字符</span><br>    <span class="hljs-keyword">while</span> (*s1 &amp;&amp; *s2) &#123;<br>        <span class="hljs-comment">// 如果两个字符不相等，返回它们的差值</span><br>        <span class="hljs-keyword">if</span> (*s1 != *s2) &#123;<br>            <span class="hljs-keyword">return</span> *s1 - *s2;<br>        &#125;<br>        <span class="hljs-comment">// 如果两个字符相等，继续比较下一个字符</span><br>        s1++;<br>        s2++;<br>    &#125;<br>    <span class="hljs-comment">// 如果循环结束，说明两个字符串有一个已经到达结束，返回它们的差值</span><br>    <span class="hljs-keyword">return</span> *s1 - *s2;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 定义两个字符串，用来测试函数</span><br>    <span class="hljs-type">char</span> str1[] = <span class="hljs-string">&quot;Hello&quot;</span>;<br>    <span class="hljs-type">char</span> str2[] = <span class="hljs-string">&quot;World&quot;</span>;<br>    <span class="hljs-comment">// 调用函数，比较两个字符串的大小</span><br>    <span class="hljs-type">int</span> result = my_strcmp(str1, str2);<br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The result of comparing &#x27;%s&#x27; and &#x27;%s&#x27; is %d\n&quot;</span>, str1, str2, result);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="5-strstr-查找"><a href="#5-strstr-查找" class="headerlink" title="5.strstr(查找)"></a>5.strstr(查找)</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-comment">// 定义一个函数，实现strstr的功能</span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">my_strstr</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *haystack, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *needle)</span> &#123;<br>    <span class="hljs-comment">// 如果needle为空，返回haystack</span><br>    <span class="hljs-keyword">if</span> (*needle == <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">char</span> *)haystack;<br>    &#125;<br>    <span class="hljs-comment">// 用一个循环，遍历haystack</span><br>    <span class="hljs-keyword">while</span> (*haystack != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>        <span class="hljs-comment">// 如果haystack和needle的第一个字符相同，就比较后面的字符</span><br>        <span class="hljs-keyword">if</span> (*haystack == *needle) &#123;<br>            <span class="hljs-comment">// 定义两个指针，分别指向haystack和needle的当前位置</span><br>            <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p1 = haystack;<br>            <span class="hljs-type">const</span> <span class="hljs-type">char</span> *p2 = needle;<br>            <span class="hljs-comment">// 用一个循环，比较p1和p2指向的字符是否相同</span><br>            <span class="hljs-keyword">while</span> (*p1 != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *p2 != <span class="hljs-string">&#x27;\0&#x27;</span> &amp;&amp; *p1 == *p2) &#123;<br>                <span class="hljs-comment">// 如果相同，就继续比较下一个字符</span><br>                p1++;<br>                p2++;<br>            &#125;<br>            <span class="hljs-comment">// 如果p2指向了&#x27;\0&#x27;，说明needle已经匹配完毕，返回haystack的当前位置</span><br>            <span class="hljs-keyword">if</span> (*p2 == <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;<br>                <span class="hljs-keyword">return</span> (<span class="hljs-type">char</span> *)haystack;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 如果haystack和needle的第一个字符不同，就继续遍历haystack</span><br>        haystack++;<br>    &#125;<br>    <span class="hljs-comment">// 如果循环结束，说明没有找到needle，返回NULL</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 定义两个字符串，用来测试函数</span><br>    <span class="hljs-type">char</span> str1[] = <span class="hljs-string">&quot;I love you&quot;</span>;<br>    <span class="hljs-type">char</span> str2[] = <span class="hljs-string">&quot;love&quot;</span>;<br>    <span class="hljs-comment">// 调用函数，查找str2在str1中的位置</span><br>    <span class="hljs-type">char</span> *ret = my_strstr(str1, str2);<br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-keyword">if</span> (ret) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;子串是：%s\n&quot;</span>, ret);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;没有找到子串\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="排序算法相关"><a href="#排序算法相关" class="headerlink" title="排序算法相关"></a>排序算法相关</h4><h5 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1.冒泡排序"></a>1.冒泡排序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bubble_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-type">int</span> i, j, temp;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++)<br>                <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; len - <span class="hljs-number">1</span> - i; j++)<span class="hljs-comment">//注意这两处的i和j不大于什么</span><br>                        <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                                temp = arr[j];<br>                                arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                                arr[j + <span class="hljs-number">1</span>] = temp;<br>                        &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">22</span>, <span class="hljs-number">34</span>, <span class="hljs-number">3</span>, <span class="hljs-number">32</span>, <span class="hljs-number">82</span>, <span class="hljs-number">55</span>, <span class="hljs-number">89</span>, <span class="hljs-number">50</span>, <span class="hljs-number">37</span>, <span class="hljs-number">5</span>, <span class="hljs-number">64</span>, <span class="hljs-number">35</span>, <span class="hljs-number">9</span>, <span class="hljs-number">70</span> &#125;;<br>        <span class="hljs-type">int</span> len = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>        bubble_sort(arr, len);<br>        <span class="hljs-type">int</span> i;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; len; i++)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2.选择排序"></a>2.选择排序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *a,<span class="hljs-type">int</span> *b)</span> <span class="hljs-comment">//交換兩個變數</span><br>&#123;<br>    <span class="hljs-type">int</span> temp = *a;<br>    *a = *b;<br>    *b = temp;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">selection_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> len)</span> <br>&#123;<br>    <span class="hljs-type">int</span> i,j;<br><br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span> ; i &lt; len - <span class="hljs-number">1</span> ; i++) <br>    &#123;<br>                <span class="hljs-type">int</span> min = i;<br>                <span class="hljs-keyword">for</span> (j = i + <span class="hljs-number">1</span>; j &lt; len; j++)     <span class="hljs-comment">//走訪未排序的元素</span><br>                        <span class="hljs-keyword">if</span> (arr[j] &lt; arr[min])    <span class="hljs-comment">//找到目前最小值</span><br>                                min = j;    <span class="hljs-comment">//紀錄最小值</span><br>                swap(&amp;arr[min], &amp;arr[i]);    <span class="hljs-comment">//做交換</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递归相关"><a href="#递归相关" class="headerlink" title="递归相关"></a>递归相关</h4><h5 id="1-进制转换实现"><a href="#1-进制转换实现" class="headerlink" title="1.进制转换实现"></a>1.进制转换实现</h5><p>本质就是利用如<br><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>7</mn><mo>%</mo><mn>2</mn><mo>&#x3D;</mo><mn>3</mn><mo>&#xb7;</mo><mo>&#xb7;</mo><mo>&#xb7;</mo><mn>1</mn></math><br><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>3</mn><mo>%</mo><mn>2</mn><mo>&#x3D;</mo><mn>1</mn><mo>&#xb7;</mo><mo>&#xb7;</mo><mo>&#xb7;</mo><mn>1</mn></math><br><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>1</mn><mo>%</mo><mn>2</mn><mo>&#x3D;</mo><mn>0</mn><mo>&#xb7;</mo><mo>&#xb7;</mo><mo>&#xb7;</mo><mn>1</mn></math><br>得出的进制数就是0111<br>或<br><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>9</mn><mo>%</mo><mn>2</mn><mo>&#x3D;</mo><mn>4</mn><mo>&#xb7;</mo><mo>&#xb7;</mo><mo>&#xb7;</mo><mn>1</mn></math><br><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>4</mn><mo>%</mo><mn>2</mn><mo>&#x3D;</mo><mn>2</mn><mo>&#xb7;</mo><mo>&#xb7;</mo><mo>&#xb7;</mo><mn>0</mn></math><br><math xmlns="http://www.w3.org/1998/Math/MathML"><mn>2</mn><mo>%</mo><mn>2</mn><mo>&#x3D;</mo><mn>1</mn><mo>&#xb7;</mo><mo>&#xb7;</mo><mo>&#xb7;</mo><mn>0</mn></math><br>得出的进制数就是1001<br>最高位是最后一次除法的得数,后面就是从下往上的余数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//十进制转二进制代码实现</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span>&#123;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">else</span><br> <span class="hljs-keyword">return</span> change(x/<span class="hljs-number">2</span>) *<span class="hljs-number">10</span> + x % <span class="hljs-number">2</span> ;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">( )</span><br>&#123; <br> <span class="hljs-type">int</span> x,y;<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br> y=change(x);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%10d &quot;</span>,y); <span class="hljs-comment">//按 10 位宽度输出十进制整数</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//十进制转十六进制代码实现</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 定义一个函数，将十进制数转换为十六进制数，并输出</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">char</span> digits[<span class="hljs-number">16</span>]=&#123;<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">toBase16</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-type">int</span> r;<br>r = num % <span class="hljs-number">16</span>;<br>num = num / <span class="hljs-number">16</span>;<br>    <span class="hljs-comment">// Think about it: printf before calling toBase16() OR calling toBase16() before printf()? </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, digits[r<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">if</span>(num != <span class="hljs-number">0</span>) <br>        toBase16(num);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> number;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter a number to convert:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;number);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Corresponding 16-based number is: \n&quot;</span>);<br>    toBase16(number);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="2-递归相关算法实现"><a href="#2-递归相关算法实现" class="headerlink" title="2.递归相关算法实现"></a>2.递归相关算法实现</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//递归实现二分法查找</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> num[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br><span class="hljs-comment">// initial index of the first and last element in number array</span><br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> right = <span class="hljs-keyword">sizeof</span>(num) / <span class="hljs-keyword">sizeof</span>(num[<span class="hljs-number">0</span>]);<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> num[], <span class="hljs-type">int</span> target, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span>&#123;<br>    <span class="hljs-keyword">if</span>(left &gt; right)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> mid = left + (right - left) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(num[mid] == target)<br>        <span class="hljs-keyword">return</span> mid;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num[mid] &lt; target)<br>        <span class="hljs-keyword">return</span> search(num, target, mid + <span class="hljs-number">1</span>, right);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">return</span> search(num, target, left + <span class="hljs-number">1</span>, mid);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-comment">// printf(&quot;Please enter number array values:\n&quot;);</span><br>    <span class="hljs-comment">// for(int i = 0; i &lt;= right; i++)</span><br>    <span class="hljs-comment">//     scanf(&quot;%d&quot;, &amp;num[i]);</span><br>    <span class="hljs-type">int</span> target;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please enter an value to search:\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;target);<br>    <span class="hljs-type">int</span> pos = search(num, target, left, right);<br>    <span class="hljs-keyword">if</span>(pos != <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Value %d is the %dth element of number array.&quot;</span>, target, pos + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Element not found!&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">快速排序因为不考这里略过<br></code></pre></td></tr></table></figure><h5 id="3-其他递归函数案例"><a href="#3-其他递归函数案例" class="headerlink" title="3.其他递归函数案例"></a>3.其他递归函数案例</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//编写计算组合数C(n,m)的函数。主函数中输入n和m的值(n&gt;m),调用函数输出输出组合数n!/(m!(n-m)!)。</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stido.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n,m;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Please type two numbers\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;C(n,m)=%d&quot;</span>,calculate(n,m));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">factorial</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>    <span class="hljs-keyword">if</span>(a==<span class="hljs-number">1</span>||a==<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> a*factorial(a<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> m)</span>&#123;<br>    <span class="hljs-keyword">return</span> factorial(n) / (factorial(m)*factorial(n-m));<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">阶乘这里就不写了，上面那个组合数的题本质就是用了阶乘<br></code></pre></td></tr></table></figure><h4 id="素数相关"><a href="#素数相关" class="headerlink" title="素数相关"></a>素数相关</h4><h5 id="1-筛法"><a href="#1-筛法" class="headerlink" title="1.筛法"></a>1.筛法</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 定义一个函数，用筛法求n以内的素数，并输出</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">sieve</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 定义一个数组，用来存储每个数是否为素数，0表示是，1表示否</span><br>    <span class="hljs-type">int</span> is_prime[n + <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 初始化数组，假设所有数都是素数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>        is_prime[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 从2开始，依次判断每个数是否为素数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-comment">// 如果i是素数，就把它的倍数都标记为非素数</span><br>        <span class="hljs-comment">/*注:也可以遍历，把is_prime[j]%is_prime</span><br><span class="hljs-comment">        [i]==0的数标记为非负数，题目可能以这种形</span><br><span class="hljs-comment">        式来表示筛法*/</span><br>        <span class="hljs-keyword">if</span> (is_prime[i] == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i * <span class="hljs-number">2</span>; j &lt;= n; j += i) &#123;<br>                is_prime[j] = <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 输出素数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;筛法求出%d以内的素数为：\n&quot;</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (is_prime[i] == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 定义一个变量，用来存储要求的范围</span><br>    <span class="hljs-type">int</span> limit;<br>    <span class="hljs-comment">// 输入一个正整数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入一个正整数：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;limit);<br>    <span class="hljs-comment">// 调用函数，求limit以内的素数</span><br>    sieve(limit);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="2-求最大公约数"><a href="#2-求最大公约数" class="headerlink" title="2.求最大公约数"></a>2.求最大公约数</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//辗转相除法求最大公约数</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br> <span class="hljs-type">int</span> t;<br> <span class="hljs-keyword">while</span>(b!=<span class="hljs-number">0</span>) &#123;<br>  t=a%b;<br>  a=b;<br>  b=t;<br> &#125;<br> <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br> <span class="hljs-type">int</span> a,b;<br> <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;a,&amp;b);<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;gcd=%d\n&quot;</span>,gcd(a,b));<br> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//更相减损术求最大公约数</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 定义一个函数，用更相减损术求两个数的最大公约数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-comment">// 如果两个数相等，直接返回其中一个数</span><br>    <span class="hljs-keyword">if</span> (a == b) &#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-comment">// 如果两个数不相等，用较大的数减去较小的数，然后递归调用函数</span><br>    <span class="hljs-keyword">if</span> (a &gt; b) &#123;<br>        <span class="hljs-keyword">return</span> gcd(a - b, b);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> gcd(a, b - a);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 定义两个变量，用来存储要求最大公约数的两个数</span><br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-comment">// 输入两个数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入两个数：\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;a, &amp;b);<br>    <span class="hljs-comment">// 输出最大公约数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;它们的最大公约数是：%d\n&quot;</span>, gcd(a, b));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/22/hello-world/"/>
    <url>/2023/11/22/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Other</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Other</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reserve 题目</title>
    <link href="/2023/11/05/reserve/"/>
    <url>/2023/11/05/reserve/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="reserve"><a href="#reserve" class="headerlink" title="reserve"></a>reserve</h1><p>关于校园官网上一些道题目的讲解</p><h2 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h2><p>下载发现这是一个PE32位文件，运行之后发现要求我们输入一个字符串，随便输入一个，弹出wrong，于是直接打开IDA发现没有main函数，于是先按shift+f12搜索字符串wrong，顺着这个字符串就能够找到调用他的函数，找到调用的主函数后，分析反编译出来的代码，主函数是将我们输入的字符串经过一个函数加密后，与主函数内的一个字符串进行对比，分析函数，发现其为变种的base64编码，写一个脚本,将对比的那串字符串，根据表，转换成六位二进制，再根据ascii转换成字符串，就能得出flag了。</p><h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><p>不难发现这个文件是一个ELF64位文件，在linux里运行，没有弹出提示，将这个文件丢进IDA里，先找主函数，分析主函数并结合题目TREE我们不难发现，这个程序首先是读取标准输入流里的32个字符，并按照层序排列的方式构建一棵二叉树，接着有一个验证函数，他以后序遍历的方式来读取二叉树里面的内容，并与他内置的32个两位十六进制数进行比较，具体过程是这样的，先读取第一个，将其赋值给tmp，tmp与内置第一个两位十六进制数进行比较，相同就++check，并继续比较，不同就退出程序，第二次比较，先将tmp与读取的第二个数进行一个虚假的异或（满足异或的特性但有不同），赋值給读取出的数，再赋值给tmp，并比较是否与第二个十六进制数相等，相等就++check，后面就重复这个过程，当检查完32个字符后，全对就会输出Congratulation！，解题方法也很简单，先用C语言复刻这个程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br>__int64 __fastcall <span class="hljs-title function_">customXOR</span><span class="hljs-params">(<span class="hljs-type">char</span> root, <span class="hljs-type">unsigned</span> __int8 tmp)</span><br>&#123;<br>  <span class="hljs-type">char</span> v2; <span class="hljs-comment">// dl</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [rsp+1h] [rbp-1h]</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [rsp+1h] [rbp-1h]</span><br>  <span class="hljs-type">unsigned</span> __int8 v6; <span class="hljs-comment">// [rsp+1h] [rbp-1h]</span><br><br>  v2 = <span class="hljs-number">16</span><br>     * ((((<span class="hljs-number">8</span><br>         * ((((<span class="hljs-number">4</span><br>             * ((((<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">4</span> | (root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">4</span> | root &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">8</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">8</span> | (<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">8</span> | (root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">8</span> | root &amp; <span class="hljs-number">8</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">0x10</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">0x10</span> | (<span class="hljs-number">4</span> * ((((<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">4</span> | (root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">4</span> | root &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">8</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">0x10</span> | (<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">0x10</span> | (root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">0x10</span> | root &amp; <span class="hljs-number">0x10</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">0x20</span>) != <span class="hljs-number">0</span>));<br>  v4 = v2 | (<span class="hljs-number">8</span><br>           * ((((<span class="hljs-number">4</span><br>               * ((((<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">4</span> | (root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">4</span> | root &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">8</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">8</span> | (<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">8</span> | (root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">8</span> | root &amp; <span class="hljs-number">8</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">0x10</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">0xEF</span> | (<span class="hljs-number">4</span> * ((((<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">4</span> | (root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">4</span> | root &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">8</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">0xE7</span> | (<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">0xE3</span> | root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) | root &amp; <span class="hljs-number">0xE0</span>;<br>  v5 = (<span class="hljs-number">32</span><br>      * (((v2 &amp; <span class="hljs-number">0x20</span> | (<span class="hljs-number">8</span><br>                      * ((((<span class="hljs-number">4</span><br>                          * ((((<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">4</span> | (root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">4</span> | root &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">8</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">8</span> | (<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">8</span> | (root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">8</span> | root &amp; <span class="hljs-number">8</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">0x10</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">0x20</span> | (<span class="hljs-number">4</span> * ((((<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">4</span> | (root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">4</span> | root &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">8</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">0x20</span> | (<span class="hljs-number">2</span> * ((((root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">2</span> | root &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">4</span>) != <span class="hljs-number">0</span>))) &amp; <span class="hljs-number">0x20</span> | (root &amp; <span class="hljs-number">1</span> ^ ((tmp &amp; <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>)) &amp; <span class="hljs-number">0x20</span> | root &amp; <span class="hljs-number">0x20</span>) != <span class="hljs-number">0</span>) ^ ((tmp &amp; <span class="hljs-number">0x40</span>) != <span class="hljs-number">0</span>))) | v4 &amp; <span class="hljs-number">0xDF</span>;<br>  v6 = (((tmp &gt;&gt; <span class="hljs-number">7</span>) ^ ((v5 &amp; <span class="hljs-number">0x40</span>) != <span class="hljs-number">0</span>)) &lt;&lt; <span class="hljs-number">6</span>) | v5 &amp; <span class="hljs-number">0xBF</span>;<br>  <span class="hljs-keyword">return</span> (((v6 &gt;&gt; <span class="hljs-number">7</span>) ^ tmp &amp; <span class="hljs-number">1</span>) &lt;&lt; <span class="hljs-number">7</span>) | v6 &amp; <span class="hljs-number">0x7F</span>u;<br>&#125;<br><span class="hljs-comment">// 全局变量，用于存储异或操作的临时结果</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> tmp; <span class="hljs-comment">//</span><br><span class="hljs-type">int</span> check = <span class="hljs-number">0</span>; <span class="hljs-comment">// 用于验证是否所有节点都已访问</span><br><br><span class="hljs-comment">// 定义二叉树节点结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> value;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> *<span class="hljs-title">left</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> *<span class="hljs-title">right</span>;</span><br>&#125; TreeNode;<br><br><span class="hljs-comment">// 创建二叉树节点</span><br>TreeNode* <span class="hljs-title function_">createNode</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> value)</span> &#123;<br>    TreeNode* node = (TreeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(TreeNode));<br>    node-&gt;value = value;<br>     node-&gt;left = <span class="hljs-literal">NULL</span>;<br>    node-&gt;right = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br><br><span class="hljs-comment">// 后序遍历并进行异或操作</span><br><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">postorderTraversal</span><span class="hljs-params">(TreeNode* root)</span> &#123;<br>    <span class="hljs-type">unsigned</span> __int64 result = <span class="hljs-number">0xFE974D705ED41790</span>LL;<br>    __int64 v3[<span class="hljs-number">5</span>];<br>    v3[<span class="hljs-number">0</span>] = <span class="hljs-number">0xC14D242A3480E17D</span>LL;<br>    v3[<span class="hljs-number">1</span>] = <span class="hljs-number">0x4B4E6AB68979708E</span>LL;<br>    v3[<span class="hljs-number">2</span>] = <span class="hljs-number">0xFE974D705ED41790</span>LL;<br>    v3[<span class="hljs-number">3</span>] = <span class="hljs-number">0xC5474CF22F3C924F</span>LL;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> result;<br>    postorderTraversal(root-&gt;left);<br>    postorderTraversal(root-&gt;right);<br>    <span class="hljs-comment">// 进行异或操作</span><br>    <span class="hljs-keyword">if</span> (check) &#123;<br>        <span class="hljs-type">int</span> b = *((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)v3 + check);<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a = customXOR(b,tmp);<br>        root-&gt;value= a;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, a);<br>        root-&gt;value=customXOR(root-&gt;value, tmp); <span class="hljs-comment">// 如果不是第一个节点，就和tmp异或</span><br>    &#125;<br>    tmp = root-&gt;value; <span class="hljs-comment">// 更新tmp</span><br>    <span class="hljs-keyword">if</span> (tmp != *((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)v3+ check)) &#123; <span class="hljs-comment">// 如果和隐藏字符串不匹配，就退出程序</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不匹配\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ++check; <span class="hljs-comment">// 更新check</span><br>&#125;<br><br><span class="hljs-comment">// 根据层序遍历的数组创建完全二叉树</span><br>TreeNode* <span class="hljs-title function_">createTreeByLevelOrder</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* values, <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-keyword">if</span> (size == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    TreeNode** nodes = (TreeNode**)<span class="hljs-built_in">malloc</span>(size * <span class="hljs-keyword">sizeof</span>(TreeNode*));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        nodes[i] = createNode(values[i]);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span> &lt; size) nodes[i]-&gt;left = nodes[<span class="hljs-number">2</span> * i + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-number">2</span> * i + <span class="hljs-number">2</span> &lt; size) nodes[i]-&gt;right = nodes[<span class="hljs-number">2</span> * i + <span class="hljs-number">2</span>];<br>    &#125;<br>    TreeNode* root = nodes[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">free</span>(nodes);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><br><span class="hljs-comment">// 主函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> values[<span class="hljs-number">32</span>]=<span class="hljs-string">&quot;flag&#123;abcdefghijklmnopqrstuvwxyz&#125;&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;启动\n&quot;</span>);<br>    <span class="hljs-comment">// 读取32个字符</span><br>    <span class="hljs-comment">//for (int i = 0; i &lt; 32; ++i) &#123;</span><br>       <span class="hljs-comment">// scanf(&quot;%c&quot;, &amp;values[i]);</span><br>   <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-comment">// 创建二叉树</span><br>    TreeNode* root = createTreeByLevelOrder(values, <span class="hljs-number">32</span>);<br>    <span class="hljs-comment">// 后序遍历并进行异或操作</span><br>    postorderTraversal(root);<br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-comment">/*for (int i = 0; i &lt; 32; ++i) &#123;</span><br><span class="hljs-comment">        printf(&quot;%c&quot;, values[i]);</span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">if</span> (check == <span class="hljs-number">32</span>) &#123; <span class="hljs-comment">// 如果所有节点都匹配，就输出&quot;Congratulation!&quot;和flag</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Congratulation!\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>根据异或运算的结合律，打印出来，在根据二叉树后序遍历的顺序，还原出原来的flag就行了（我这里是直接手画，太丑就不看了），得出flag是flag{15t_A1_u5e_p01n75r5_4_50u1}</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023SSSCTF WriteUp</title>
    <link href="/2023/10/22/2023SSSCTF-WriteUp/"/>
    <url>/2023/10/22/2023SSSCTF-WriteUp/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="2023SSSCTFのwrite-up"><a href="#2023SSSCTFのwrite-up" class="headerlink" title="2023SSSCTFのwrite up"></a>2023SSSCTFのwrite up</h1><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="test-your-nc"><a href="#test-your-nc" class="headerlink" title="test your nc"></a>test your nc</h3><p>根据<a href="https://loora1n.github.io/2022/09/13/nc%20%E6%98%AF%E4%BB%80%E4%B9%88/">nc教程</a>,下载并使用windows版nc，然后用powershell打开nc，键入’.&#x2F;ncat 地址 端口’，成功连接后，输入’cat &#x2F;flag’就能拿到flag了  </p><h3 id="Hack-Traffic-Light"><a href="#Hack-Traffic-Light" class="headerlink" title="Hack Traffic Light"></a>Hack Traffic Light</h3><p>利用nc连接上服务器，<br><img src="https://s2.loli.net/2023/10/30/Hd8ozQFj1axEPNK.png" alt="hardtriffic1.png"><br>按照题目要求随便输入几个数，然后观察输出的变化！，不难发现，三个十六进制数中，第一个数字与第三个数字所对应的秒数互换了，所以我们只要将题目要求的秒数转换成十六进制，并交换一三位再输入，就能得到flag了！  </p><h3 id="strange-graphic"><a href="#strange-graphic" class="headerlink" title="strange graphic"></a>strange graphic</h3><p>利用nc连接上服务器，根据题目，我们不难猜测出这道题目要利用c语言中整形变量数据溢出的漏洞，因此我们只需要构造特定的数，来满足题目条件</p><ol><li>第一小题，他们的和的两倍小于题目要求的，所以我们只需要让结果超出2147483648，让其为一个负数就行了  </li><li>第二小题也是这样，不过构造起来麻烦一点(其实是我忘了，我记忆中好像是构造了一个结果超过了两倍的2147483648的数，让他溢出后变成了一个小正数9，满足题目要求) 然后这里利用了网上的一个分解整数的软件，链接就不放了，网上蛮多的</li><li>第三部分输入-1和2147483648就行了，下面放图片<br><img src="https://s2.loli.net/2023/10/30/Bh9FsZxMqiyzPrp.png" alt="strange1.png"></li></ol><h3 id="这就是我所做出pwn试题"><a href="#这就是我所做出pwn试题" class="headerlink" title="这就是我所做出pwn试题"></a>这就是我所做出pwn试题</h3><h2 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h2><h3 id="操控加密"><a href="#操控加密" class="headerlink" title="操控加密"></a>操控加密</h3><p>题目给了我们一串密文和一个用来加密的程序，输入字符便能给我们返回加密后的数据，<br><img src="https://s2.loli.net/2023/10/30/1Ddm2ijTOaqWxR3.png" alt="caokongjiami1.png"><br>根据flag的开头，然后把键盘上<br>个字母的大小写和数字输进去，然后人肉破解(解密是真不会啊)，这样我们就能得到flag了</p><h4 id="这就是我所做出REVERSE试题"><a href="#这就是我所做出REVERSE试题" class="headerlink" title="这就是我所做出REVERSE试题"></a>这就是我所做出REVERSE试题</h4><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h3><p>题目给了我们一个网站,我们打开网页源代码可以看见这样一行提示<img src="https://s2.loli.net/2023/10/30/q2ekUAGlzCLQKO5.png" alt="ezphp1.png"><br>将getflag.php输入到url后面，我们可以进录到一个新的页面，打开源码，有以下信息<img src="https://s2.loli.net/2023/10/30/NaWT3DwQLjlBYiZ.png" alt="Snipaste_2023-10-12_19-37-31.png">这明显是想要提示我们利用get传参的办法，于是加入?DLUT&#x3D;2023SSSCTF，成功获取flag.<br>另外，进入网页的robots.txt文件我们还能获取到彩蛋的最后一个碎片</p><h3 id="INFO-SELECTION"><a href="#INFO-SELECTION" class="headerlink" title="INFO SELECTION"></a>INFO SELECTION</h3><p>一进到网页网页提示说不会让我们获取源码，我们点击f12,检查源码，可以发现hint<br><img src="https://s2.loli.net/2023/10/30/1D7USc2skAr9zxR.png" alt="info1.png"><br>提示我们敏感文件都有哪些，我们不难想到flag可能藏在如roobots.txt <a href="http://www.zip/">www.zip</a> 备份（其实是我忘记了第三个是什么貌似是一个.bak文件?)等文件中，在URL中加上这些我们就能够获取到flag的三个碎片，从而得到正确的flag了</p><h3 id="YuanのSQL"><a href="#YuanのSQL" class="headerlink" title="YuanのSQL"></a>YuanのSQL</h3><p>进入网站(我超，原)，观察到网站下方的提示，不难想到这是一个有关于sql注入的题目<br><img src="https://s2.loli.net/2023/10/30/6FcJXn3mI2AP94a.png" alt="yuansql.png"><br>不难发现php语句中缺少了引号，键入数值为1的id时，我们获取到了“scr1w”,当键入的数值为2时，我们就成功获取到了flag（具体流程给忘了，所以说的有点不清楚，但大致流程确实是这样的)</p><h3 id="ezphp2-0"><a href="#ezphp2-0" class="headerlink" title="ezphp2.0"></a>ezphp2.0</h3><p>进入网页后我们能看见网页给的php代码<br><img src="https://s2.loli.net/2023/10/30/naZGXMeA5c197xi.png" alt="ezphp2.png"><br>阅读代码我们不难知道我们首先要让’DLUT&#x3D;A306’成立，代码中要求WEB1不等于WEB2但都要等于114514，而”&#x3D;&#x3D;”为弱相等，我们便可以将他们分别等于114514a于114514b,以get传参后出现<br><img src="https://s2.loli.net/2023/10/30/kXGL6TmjDQiMVvI.png" alt="ezphp2_2.png"><br>根据弹出的内容，我们可知这有关php伪协议，且经测试flag.php中的flag不能直接获得，所以要经base64编码后获得,满足这两条后，我们构造payload<br><code>http://210.30.97.133:10009/?DLUT=A306&amp;WEB1=114514a&amp;WEB2=114514b&amp;file=php://filter/convert.base64-encode/resource=flag.php</code><br>获取base64编码后的内容<br><code>T0hISEhISEhISEhISCEKWW91IEp1c3QgR2V0IFRoZSBGbGFnISEhIQpTbyBOZXdCZWUh4pSAPeKJoc6jKCgo44Gk4oCizIDPieKAosyBKeOBpOKUgD3iiaHOoygoKOOBpOKAosyAz4nigKLMgSnjgaTilIA94omhzqMoKCjjgaTigKLMgM+J4oCizIEp44GkClRoaXMgaXMgdGhlIGZsYWc6Cjw/cGhwCiRGTEFHID0gJ2ZsYWd7ZDczYmE2ZmItZWJjMC00MWYxLWE3MGYtY2MwOWRlMjlhMjNmfSc7Cj8+</code><br>再解码就能获得flag了</p><h3 id="SleepyHead"><a href="#SleepyHead" class="headerlink" title="SleepyHead"></a>SleepyHead</h3><p>进入网页，看见有关使用浏览器的信息<br><img src="https://s2.loli.net/2023/10/30/ZkToDJvfjXmgirU.png" alt="sleephead1.png"><br>猜测可能与http headers的修改有关，于是拖进burpsuite中查看，将浏览器改为Scr1w后变为：<br><img src="https://s2.loli.net/2023/10/30/eGtIkTNfpAFKcmb.png" alt="sleep2.png"><br>加上Referer:Scr1w.Studio<br><img src="https://s2.loli.net/2023/10/30/2xsFjQndlK1pC8L.png" alt="sleep3.png"><br>加上DNT:1变成：<br><img src="https://s2.loli.net/2023/10/30/oZfMIbXTQV8z67U.png" alt="sleep4.png"><br>加上via:claaaaash.mono<br><img src="https://s2.loli.net/2023/10/30/Obda3TMzwrGpWhn.png" alt="sleep5.png"><br>加上X-Forwarded-For:127.0.0.1<br><img src="https://s2.loli.net/2023/10/30/ny1YkJIDGctvAUE.png" alt="sleep6.png"><br>成功获取flag，<br><img src="https://s2.loli.net/2023/10/30/yzLGuYpHthWoJc6.png" alt="phase7.png"></p><h4 id="这就是我所做出的WEB试题"><a href="#这就是我所做出的WEB试题" class="headerlink" title="这就是我所做出的WEB试题"></a>这就是我所做出的WEB试题</h4><h2 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h2><h3 id="等比数列"><a href="#等比数列" class="headerlink" title="等比数列?"></a>等比数列?</h3><p>根据题目的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>a0 =<br>q =????<br>n = <span class="hljs-number">710009</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    a = a0*q % n<br>    a0 = a<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">30</span>:<br>        <span class="hljs-built_in">print</span>(a)<br>    <span class="hljs-keyword">if</span> i == <span class="hljs-number">66</span>:<br>        <span class="hljs-built_in">print</span>(a)<br><span class="hljs-comment"># 338473</span><br><span class="hljs-comment"># 519563</span><br></code></pre></td></tr></table></figure><p>可写出这样一个代码(实际上是GPT写的),</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">710009</span><br><br><span class="hljs-comment"># 遍历所有可能的 a0 和 q 的值</span><br><span class="hljs-keyword">for</span> a0 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>, <span class="hljs-number">10000</span>):<br>    <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n):<br>        <span class="hljs-comment"># 计算第31项和第67项</span><br>        a31 = a0<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>            a31 = a31 * q % n<br>        a67 = a31<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">36</span>):<br>            a67 = a67 * q % n<br>        <span class="hljs-comment"># 检查是否满足题目给出的值</span><br>        <span class="hljs-keyword">if</span> a31 == <span class="hljs-number">338473</span> <span class="hljs-keyword">and</span> a67 == <span class="hljs-number">519563</span>:<br>            <span class="hljs-comment"># 打印出一组解</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a0 =&quot;</span>, a0, <span class="hljs-string">&quot;q =&quot;</span>, q)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>最后破解出a0和q的值分别为3202和2023，从而得出flag(GPT立大功)</p><h3 id="basic-RSA"><a href="#basic-RSA" class="headerlink" title="basic-RSA"></a>basic-RSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python是ctf中最常用的语言，请你通过搜索引擎，自行安装python，并学习如何为python安装第三方库</span><br><span class="hljs-comment"># 在配置好python环境后，你需要自行安装pycryptodome库、gmpy2库</span><br><span class="hljs-comment"># 在完成所有配置后，可以运行这段代码，得到你的flag！</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># 导入我们下载的crypto库，方便后续使用库中的函数</span><br><br><span class="hljs-comment"># bytes_to_long()函数，把字母转成数字</span><br>m = bytes_to_long(<span class="hljs-string">b&#x27;**********************************&#x27;</span>)<br><br><span class="hljs-comment"># 生成两个随机的素数，取名p和q</span><br>e = <span class="hljs-number">65537</span><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br><br><span class="hljs-comment"># 计算p乘q</span><br>n = p*q<br><br><span class="hljs-comment"># RSA加密，pow()实现了次幂运算，第三个参数是模数，例如pow(2,4,3)=(2*2*2*2) % 3 = 1</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-comment"># 输出p、q、c</span><br><span class="hljs-built_in">print</span>(p, q, c)<br><br><span class="hljs-comment"># 下面是解密代码，当你配好所需要的python环境后，上网自行搜索RSA解密的步骤，补全代码进行解密</span><br>p = <span class="hljs-number">11272029161810989637077873599019496877008218675207504587156140192021377360482704022176035187554108368278190548694137066116291687848811218316609251992398531</span><br>q = <span class="hljs-number">8907273588185400007517004981004813156071713948292117095141121709405743482454098895087505262599398998351848699006495710441163005192326918043131527773275261</span><br>n = p*q<br>e = <span class="hljs-number">65537</span><br><br>d =<span class="hljs-number">86878502655260118864644922031588477057410536348819682235197775008566666793725177071665880121392724687843582788113205748413157483597543224904923252083988393307886889482606627681815785098540071203174556413083407356299373068894395628419702691762298577890184942379591377595895204260258458213890493837578458778073</span><br>c = <span class="hljs-number">59456089016060766225332390698350903116623033134514592830079717766948507914949032997169195220803642273910722815705790231122189278462009688705900558121892002228836045157732582528181395382772779860190430228823868911649968133987708461443646703064201375236983090379446718660629027030001866595377945046940440636896</span><br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c, d, n)))<br></code></pre></td></tr></table></figure><p>安装好所对应的库之后，掏出我们的<br><img src="https://s2.loli.net/2023/10/30/M9NqevwlOTVPYsp.png" alt="bas_rsa1.png"><br>一个个输进去就能解出flag了</p><h3 id="X-2-RSA"><a href="#X-2-RSA" class="headerlink" title="X^2-RSA"></a>X^2-RSA</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>e = getPrime(<span class="hljs-number">512</span>)<br>n = p*q<br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n)<br>gift1 = p+q<br>gift2 = e**<span class="hljs-number">2</span> % p<br><br>n = <span class="hljs-number">119599732159422912237126092503633593127444912729791769936188025920440247693519660056564377003327876458608897540804699714727762677074095341934117636626737553788910255544086673845028462552403437563867021138226332533523261069120346290748100178821888057505879672808893138750370221354811388445573458187283950529329</span><br>c = <span class="hljs-number">26993320920246459282903918258141924700555534517795083322600888678032578078748098842182757614410623183383625789026194273160849599428611123639374938192451695449150144414006335708435850583611654329589400433382496740881780217929655022786322641976440238749489472351300088441838107888022748740774750642665176409512</span><br>gift1 = <span class="hljs-number">21880888517757890831027504308354774959604394643578725603877760598995238359425630435298497116759287279215040830436678520457866585439083039292573782745193150</span><br>gift2 = <span class="hljs-number">10396530748040666625822969282831155457018939705806203185375728535142910851038248041763489482743937736843953702379394388895553869400661190661679347693932652</span><br></code></pre></td></tr></table></figure><p>代码如上<br>先算出p，q的值，根据p+q,q*q,写出py代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> symbols, Eq, solve<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate_p_q</span>(<span class="hljs-params">product, <span class="hljs-built_in">sum</span></span>):<br>    p, q = symbols(<span class="hljs-string">&#x27;p q&#x27;</span>)<br>    <span class="hljs-comment"># 设置方程</span><br>    eq1 = Eq(p*q, product)<br>    eq2 = Eq(p+q, <span class="hljs-built_in">sum</span>)<br>    <span class="hljs-comment"># 解方程</span><br>    solution = solve((eq1,eq2), (p, q))<br>    <span class="hljs-keyword">return</span> solution<br><br><span class="hljs-comment"># 已知的p*q和p+q的值</span><br>product = <span class="hljs-number">119599732159422912237126092503633593127444912729791769936188025920440247693519660056564377003327876458608897540804699714727762677074095341934117636626737553788910255544086673845028462552403437563867021138226332533523261069120346290748100178821888057505879672808893138750370221354811388445573458187283950529329</span>  <span class="hljs-comment"># 这是p*q的值</span><br><span class="hljs-built_in">sum</span> =<span class="hljs-number">21880888517757890831027504308354774959604394643578725603877760598995238359425630435298497116759287279215040830436678520457866585439083039292573782745193150</span>       <span class="hljs-comment"># 这是p+q的值</span><br><br>solution = calculate_p_q(product, <span class="hljs-built_in">sum</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解: <span class="hljs-subst">&#123;solution&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后通过gift2和p算出e</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 定义一个函数，用扩展欧几里得算法求解线性同余方程</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exgcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> a, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    d, x, y = exgcd(b, a % b)<br>    <span class="hljs-keyword">return</span> d, y, x - (a // b) * y<br><br><span class="hljs-comment"># 输入x^2%p的值和p的值</span><br>r = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入x^2%p的值：&quot;</span>))<br>p = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入p的值：&quot;</span>))<br><br><span class="hljs-comment"># 判断r是否是p的二次剩余，即是否存在x满足x^2%p=r</span><br>d = exgcd(r, p)[<span class="hljs-number">0</span>] <span class="hljs-comment"># 求r和p的最大公约数</span><br><span class="hljs-keyword">if</span> d != <span class="hljs-number">1</span>: <span class="hljs-comment"># 如果r和p不互质，那么无解</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无解&quot;</span>)<br><span class="hljs-keyword">else</span>: <span class="hljs-comment"># 如果r和p互质，那么有解</span><br>    <span class="hljs-comment"># 使用费马小定理求r的模p平方根，即x^2%p=r</span><br>    <span class="hljs-comment"># 费马小定理：如果a和p互质，那么a^(p-1)%p=1</span><br>    <span class="hljs-comment"># 令a=r，两边同时开方得到r^(p+1)/4%p=x或-x</span><br>    x = <span class="hljs-built_in">pow</span>(r, (p + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, p) <span class="hljs-comment"># 使用pow函数快速求幂取模</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;一个可能的解是：&quot;</span>, x)<br></code></pre></td></tr></table></figure><p>解出p q e后丢风二西里就能解出flag了</p><h4 id="这就是我所做出的CRYPTO试题"><a href="#这就是我所做出的CRYPTO试题" class="headerlink" title="这就是我所做出的CRYPTO试题"></a>这就是我所做出的CRYPTO试题</h4><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="快来签到吧！"><a href="#快来签到吧！" class="headerlink" title="快来签到吧！"></a>快来签到吧！</h3><p>一眼社会主义核心价值观加密，找网上工具就能解决了</p><h3 id="不许发电"><a href="#不许发电" class="headerlink" title="不许发电"></a>不许发电</h3><p>用101editor打开(或者放linux里面)，用png.bt模板，发现ihdr的crc校验报错（放linux图片会打不开，因为linux也有crc校验），怀疑改了宽高，修改高后发现底部有一个二维码<br><img src="https://s2.loli.net/2023/10/30/lWHrn4uzT69keVK.png" alt="power.png"><br>扫描完二维码就能获取到flag了(所以这题为什么300分)</p><h2 id="尊嘟假嘟"><a href="#尊嘟假嘟" class="headerlink" title="尊嘟假嘟"></a>尊嘟假嘟</h2><p>直接丢excel里面，然后按一下A1那个框就会停止跳动？(猜测出题人应该是想要让我们写个py程序，自动读取A1框的值，然后返回到A2,但不知道为什么点一下就会暂停。。)，使用时间暂停大法后，输入值，将返回值进行base64解密，从而获取flag(所以这题为什么300分)</p><h3 id="未经禁止，允许垂钓！"><a href="#未经禁止，允许垂钓！" class="headerlink" title="未经禁止，允许垂钓！"></a>未经禁止，允许垂钓！</h3><p>拿到图片，先修改高，成功获取一个fakeflag<br>之后丢进kali里用pngcheck,发现有zip压缩文件，提取出来得到<br><img src="https://s2.loli.net/2023/10/30/9EwufkAFmaXxZLT.png" alt="chuidiao.png"><br>打开fulage.txt发现<br><img src="https://s2.loli.net/2023/10/30/taOzd4NmS9xEj7q.png" alt="chuidiao2.png"><br>又是一个fakeflag<br>打开010editor,上面没什么问题，滑到最下面，<br><img src="https://s2.loli.net/2023/10/30/f1pBJNMkn2TzHcj.png" alt="chuidiao3.png"><br><img src="https://s2.loli.net/2023/10/30/lPQnYC8vpLwTKfz.png" alt="chuidiao4.png"><br>可以发现这是一张png图片，但是有些问题，观察标题和图片<br><img src="https://s2.loli.net/2023/10/30/o7DIYNSB2dlqJMP.png" alt="chuidioa5.png"><br><img src="https://s2.loli.net/2023/10/30/MJxw8e6CpShOs3f.png" alt="chuidiao6.png"><br>发现读法就是加密的方式<br>于是编写个py脚本来解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_hex</span>(<span class="hljs-params">hex_string</span>):<br>    hex_list = hex_string.split()<br>    pairs = [hex_list[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(hex_list), <span class="hljs-number">2</span>)]<br>    odd_pairs = pairs[::<span class="hljs-number">2</span>]<br>    even_pairs = pairs[<span class="hljs-number">1</span>::<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">return</span> odd_pairs + even_pairs<br><br>hex_string = <span class="hljs-string">&quot;00 49 00 00 45 4E 00 00 44 AE 00 00 42 60 00 00 82 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00&quot;</span><br>pairs = process_hex(hex_string)<br><br>output = <span class="hljs-string">&#x27; &#x27;</span>.join([<span class="hljs-string">&#x27; &#x27;</span>.join(pair) <span class="hljs-keyword">for</span> pair <span class="hljs-keyword">in</span> pairs])<br><span class="hljs-built_in">print</span>(output)<br></code></pre></td></tr></table></figure><p>PS；这玩意一次只能解密两行，然后一共有190行，你猜我按了几次ctrl CV?，所以说学会python是件好事(<br>将解密后的16进制码以16进制文件导入010editor保存为png得到<br><img src="https://s2.loli.net/2023/10/30/6NC58RpZ2Y1S4Tw.png" alt="chuidiao8.png"><br>一眼base64,解码后就能得到flag了（)</p><h4 id="这就是我做出来的misc试题"><a href="#这就是我做出来的misc试题" class="headerlink" title="这就是我做出来的misc试题"></a>这就是我做出来的misc试题</h4><h2 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h2><h3 id="身在曹营心在汉"><a href="#身在曹营心在汉" class="headerlink" title="身在曹营心在汉"></a>身在曹营心在汉</h3><p>无意间在设计组群看到一个奇怪的名字(我是用电脑版qq看的，所以一眼就看到了)，点开就发现了flag</p><h3 id="CanCanWord"><a href="#CanCanWord" class="headerlink" title="CanCanWord"></a>CanCanWord</h3><p>将照片导入手机相册，<br><img src="https://s2.loli.net/2023/10/30/YTESJyUnGXZkj9V.jpg" alt="cancanneed.jpg"><br>然后发现图片右下角的<br><img src="https://s2.loli.net/2023/10/30/KWG5bI1oyALchCY.png" alt="cancanneed2.png"><br>猜测是从上海浦东国际机场到大连周水子国际机场的飞机，打开<a href="https://www.flightaware.com/live/flight/CCD8954/history/20230826/0245Z/ZSPD/ZYTL">flightaware</a>根据时间和起飞将落地,找到对应航班<br><img src="https://s2.loli.net/2023/10/30/e2HmLIac9Nws4KR.png" alt="cancanneed3.png"><br>网上搜索不难知道，CA8954是波音737-800型，搜索大连航空飞机的座位表，结合图片，我们不难知道图片所拍摄的是紧急逃生出口，我们在紧急逃生出口的后一排，结合角度，判断出在19C的位置上</p><h4 id="这就是我所做出的OSINT题目"><a href="#这就是我所做出的OSINT题目" class="headerlink" title="这就是我所做出的OSINT题目"></a>这就是我所做出的OSINT题目</h4><p>##GAME<br>###Crossy Road<br>简单地过马路(实际上是拼手速)，完成三条后，页面会提示我们魂斗罗的作弊码，我们在网页中输入上上下下左右左右ba后，页面会提示我们去控制台，这样我们就能获得第一条彩蛋碎片。<br>###Pacman<br>困难模式下胜利我们可以获得flag，简单模式下失败我们会获得第二条彩蛋碎片（其实在控制台里全都能直接看到），<br>看在我解出了三条彩蛋碎片的份上，能不能给我一些奖励(,sleephead里的彩蛋实在是找不到啊，翻了两三遍了。。</p><p>####这就是我所做出的GAME试题</p><p>以上，就是我在本次2023SSSCTF中做出的所有题目的的writeup了</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
